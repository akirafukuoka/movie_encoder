package com.akirafukuoka {	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.geom.Point;		public class Records {		private var _recordArray:Array = [];		private var _w_num:int = 0;		private var _h_num:int = 0;		private var _p_width:Number = 0;		private var _p_height:Number = 0;		private var _blocks:Blocks;		private var _framerate:Number = 30;		public function Records(blocks:Blocks, w_num:int,h_num:int,p_width:Number, p_height:Number) {			// constructor code			_blocks = blocks;			_w_num = w_num;			_h_num = h_num;			_p_width = p_width;			_p_height = p_height;		}		public function addRecord(frame:int,timeCode:Number):void {			var record:Record = new Record(frame,timeCode,_w_num,_h_num);			_recordArray.push(record);		}		public function getRecordFromFrame(frame:int):Record {			return _recordArray[frame];		}		public function getLatestRecord():Record {			return _recordArray[_recordArray.length-1];		}		public function getFrameCount():int {			return _recordArray.length;		}		public function get framerate():Number {			return _framerate;		}		public function set framerate(num:Number):void {			_framerate = num;		}		public function publishOutputJson():String {			var obj:Object = new Object();			obj.params = {};			obj.params.framerate = _framerate;			obj.params.frameLength = _recordArray.length;			obj.params.width = _w_num*_p_width;			obj.params.height = _h_num*_p_height;			obj.params.wNum = _w_num;			obj.params.hNum = _h_num;			obj.params.spriteSheet = {width:_p_width,height:_p_height,regX:0, regY:0, numFrames:_blocks.totalFrames}			obj.frames = [];			var record:Record;			var frame:Object;			var blockData:Object;			var block:Object;			var point:Point;			for(var t:int=0;t<_recordArray.length;t++) {				record = _recordArray[t];				frame = [];				//frame.f = record.frame;				//frame.timeCode = record.timeCode;				//frame.blocks = [];				for(var i:int=0;i<_w_num;i++){					for(var k:int=0;k<_h_num;k++){						blockData = _blocks.getBlock(i,k);						/*						block = {};						//block.xn = i;						//block.yn = k;						//block.x = i*_p_width;						//block.y = k*_p_height;						block.frame = blockData.getOutputFrame(record.getBlockNum(i,k));						frame.blocks.push(block);						*/						frame.push(blockData.getOutputFrame(record.getBlockNum(i,k)));					}				}				obj.frames.push(frame);			}			return JSON.stringify(obj);		}		public function drawFrame(bmpd:BitmapData,frame:int):void {			var record:Record = _recordArray[frame];			var ox:Number = 0;				var oy:Number = 0;			for(var i:int=0;i<_w_num;i++){				for(var k:int=0;k<_h_num;k++){					ox = _p_width*i;					oy = _p_height*k;					bmpd.copyPixels(_blocks.getBlockBitmapData(i,k,record.getBlockNum(i,k)),new Rectangle(0,0,_p_width,_p_height),new Point(ox,oy));				}			}		}	}}