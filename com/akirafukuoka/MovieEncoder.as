package com.akirafukuoka {		import flash.display.Sprite;	import flash.display.Shape;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Graphics;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.net.LocalConnection;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.filesystem.*;	import flash.utils.ByteArray;	import flash.geom.Point;	import flash.geom.Rectangle;	import com.adobe.images.*;	import flash.geom.Rectangle;	import flash.html.script.Package;	import com.akirafukuoka.Block;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.geom.Matrix;			public class MovieEncoder extends Sprite {				private var _green:Number = 0x38dc7c;				private var _container:Sprite = new Sprite();		private var _controller:Sprite = new Sprite();		private var _nowPlay:Boolean = false;		private var _nowSeek:Boolean = false;		private var _video:Video;		private var _nc:NetConnection = new NetConnection();		private var _ns:NetStream		//private var _movieUrl:String = "test.flv";		//private var _movieUrl:String = "test4_1_1.flv";		//private var _movieUrl:String = "test2.flv";		private var _movieUrl:String = "";		private var _imageUrlArray:Array = [];		private var _w:Number = 640;		private var _h:Number = 360;		//分解数		private var _ws:Number = 16;		private var _hs:Number = 12;		//ブロック一個当たりのサイズ		private var _wp:Number = Math.round(_w/_ws);		private var _hp:Number = Math.round(_h/_hs);		private var _videoLength:Number;		private var _framerate:Number = 30;				private var _blocks:Blocks;		//差分画像画像中許容ピクセル（%）		private var _threshold:Number = 1;		//圧縮率的な。100は無茶。50が限度		private var _threshold2:Number = 40;		private var _records:Records;				private var _header:Header = new Header();						private var _dropdownFileType:DropdownMenu;		private var _btnFileSelect:Button;		private var _btnGenerate:Button;		private var _inputFilepath:Input;		private var _inputThreshold1:Input;		private var _inputThreshold2:Input;				private var _dropdownFormat:DropdownMenu;				private var _progressGenerate:TextField = new TextField();				private var _filename:String = "movie";		private var _inputFilename:Input;		private var _inputFramerate:Input;		private var _btnExport:Button;				private var _view0:Sprite = new Sprite();		private var _view1:Sprite = new Sprite();		private var _view2:Sprite = new Sprite();				private var _bmpd:BitmapData = new BitmapData(1,1,false);		private var _bmp:Bitmap = new Bitmap(_bmpd);				private var _bmpd0:BitmapData = new BitmapData(1,1,false);				private var _replayContainer:Sprite = new Sprite();		private var _decodeBmpd:BitmapData = new BitmapData(1,1,false);		private var _decodeBmp:Bitmap = new Bitmap(_decodeBmpd);				private var _dataRecordArray:Array = [];						private var _txt:TextField = new TextField();				private var _nowFrame:int = 0;		private var _oldTime:Number = -1;						private var _txtArea:TextField = new TextField();				private var _isMovie:Boolean = false;						public function MovieEncoder() {			// constructor code			stage.align= "TL";			stage.scaleMode= "noScale";			stage.addEventListener(Event.RESIZE,onResize);						addedToStage();		}		private function onResize(event:Event=null):void{				}		//		// アプリの初期アピアランス設定		//		private function addedToStage(event:Event=null):void{						_dropdownFileType = new DropdownMenu(560,60, ["IMAGE SEQUENCE","FLV"],[false,true],selectFileType);			_btnFileSelect = new Button(560, 60,"SELECT FILE", selectFile);			_inputFilepath = new Input(560, "FILE PATH", "");			_inputThreshold1 = new Input(560, "THRESHOLD1(0.1-10.0)", String(_threshold));			_inputThreshold2 = new Input(560, "THRESHOLD1(1-100)", String(_threshold2));			_btnGenerate = new Button(560, 60,"GENERATE", generate);									_btnFileSelect.y = (60+10)*1;			_inputFilepath.y = (60+10)*2;			_inputThreshold1.y = (60+10)*3;			_inputThreshold2.y = (60+10)*4;			_btnGenerate.y = (60+10)*6;									_view0.addChild(_btnFileSelect);			_view0.addChild(_inputFilepath);			_view0.addChild(_inputThreshold1);			_view0.addChild(_inputThreshold2);			_view0.addChild(_btnGenerate);			_view0.addChild(_dropdownFileType);			_view0.x = 40;			_view0.y = _header.height+40;						var format:TextFormat = new TextFormat();			format.color = _green;			format.font = "Avenir Next Bold";			format.size = 96;			format.align = "center"			_progressGenerate.defaultTextFormat = format;			_progressGenerate.text = "0%";			_progressGenerate.width = _header.width;			_progressGenerate.y = 200;			_video = new Video(_w,_h);			_view1.addChild(_bmp);			_view1.addChild(_video);			_view1.addChild(_progressGenerate);			_view1.x = 0;			_view1.y = _header.height+0;																		_inputFilename = new Input(560, "FILE NAME", _filename);			_inputFramerate = new Input(560, "FRAMERATE", String(_framerate));			_dropdownFormat = new DropdownMenu(560,60, ["JPEG","PNG"],[true,false],function(){});			_btnExport = new Button(560, 60,"EXPORT", saveAll);			_inputFilename.y = (60+20)*0;			_inputFramerate.y = (60+20)*1;			_dropdownFormat.y = (60+20)*2;			_btnExport.y = (60+20)*4;			_view2.addChild(_inputFilename);			_view2.addChild(_inputFramerate);			_view2.addChild(_btnExport);			_view2.addChild(_dropdownFormat);			_view2.x = 40;			_view2.y = _header.height+40;									_container.addChild(_view0);			_container.addChild(_view1);			_container.addChild(_view2);						changeView(0);									//_container.addChild(_txtArea);									//_decodeBmpd = new BitmapData(_w,_h,false);			//_decodeBmp.bitmapData = _decodeBmpd;			//_replayContainer.y = _h;			//_replayContainer.addEventListener(MouseEvent.CLICK, clickReplay);									addChild(_container);			addChild(_header)			//addChild(_replayContainer);					}		private function selectFileType(event:MouseEvent=null):void {			trace("selectFileType");			if(_isMovie != _dropdownFileType.value){				_isMovie = _dropdownFileType.value;				_movieUrl = "";				_imageUrlArray = [];				_inputFilepath.text = "";			}		}		//		// 読み込むファイル選択ダイアログを表示		//		private function selectFile(event:MouseEvent=null):void{			var file:File = new File();						if(_isMovie){				trace("test1");				// FLV時				// 選択された時に呼び出されるイベント				file.addEventListener(Event.SELECT , FileBrowseForOpenSelectFunc);				function FileBrowseForOpenSelectFunc(e:Event):void {									// 選択したファイル					var select : File = e.target as File;									trace("開く : " + select.url);					_inputFilepath.text = select.url;								};								// キャンセルされた時に呼び出されるイベント				file.addEventListener(Event.CANCEL , FileBrowseForOpenCancelFunc);				function FileBrowseForOpenCancelFunc(e:Event):void {									trace("閉じるボタンが押された");								};								// １つのファイルを開くためのダイアログを表示する(非同期)				file.browseForOpen("ファイルを開く");							}else{				trace("test2");				// イメージシーケンス時				file.addEventListener(Event.SELECT,FileBrowseForDirectorySelectFunc);				function FileBrowseForDirectorySelectFunc(e:Event):void {									var select : File = e.target as File;					_inputFilepath.text = select.url;										_imageUrlArray = [];									var files : Array = select.getDirectoryListing();					var i:int;					for(i=0;i < files.length;i++){						var file : File = files[i];						var pathArray:Array = file.url.split("/");						var filename:String = pathArray[pathArray.length-1].toLowerCase();						//						// JPGかPNGだけ許可						if(filename.indexOf(".jpg")>=0 || filename.indexOf(".jpeg")>=0 || filename.indexOf(".png")>=0){							_imageUrlArray.push(file.url);							trace(file.url);						}											}				};				// ファイルを保存するためのダイアログを表示する(非同期)				file.browseForDirectory("ディレクトリを選択");							}		}		private function changeView(num:int):void {			_header.nav.pin.x = 110*num;			_view0.visible = false;			_view1.visible = false;			_view2.visible = false;			if(num==0){				_view0.visible = true;			}else if(num==1){				_view1.visible = true;			}else {				_view2.visible = true;			}		}		//		// 設定を完了し画像ジェネレートに進む		//		private function generate(e:MouseEvent=null):void{						_movieUrl = _inputFilepath.text;			_threshold = Number(_inputThreshold1.text);			_threshold2 = Number(_inputThreshold2.text);						if(!isNaN(_threshold) && !isNaN(_threshold2)){				if(_isMovie && _movieUrl!=""){					movieStart();									changeView(1);				}else if(!_isMovie && _imageUrlArray.length){					imageLoadStart();					changeView(1);				}			}		}		//		// 最終画像ファイルとJSONファイルを出力		//		private function saveAll(me:MouseEvent=null):void{			trace("clickReplay");			//addEventListener(Event.ENTER_FRAME,replayEnterframe);						//_bmpd3.draw(_bmpd0);						_filename = _inputFilename.text;			_records.framerate = Number(_inputFramerate.text);			var jpeg:Boolean = _dropdownFormat.value;			trace(jpeg);						if(_filename !=""){				saveGraphicFile(_blocks.publishOutputBitmapData(),jpeg);				saveJson(_records.publishOutputJson());								changeView(0);			}			//_txtArea.text = _records.publishOutputJson();		}				//		// プログレスバー描画		//		private function moveProgress(par:Number):void{			_progressGenerate.text = Math.round(100*par)+"%";			_bmp.scaleX = _header.width / _bmp.width;			_bmp.scaleY = _bmp.scaleX;			_progressGenerate.y = Math.round((_bmp.height - _progressGenerate.height)*0.5);		}		private function endGenerate():void{			changeView(2);							var date:Date = new Date();			_inputFilename.text = "movie"+date.fullYear+add0(date.month+1)+add0(date.date)+add0(date.hours)+add0(date.minutes)+add0(date.seconds);		}		//		// イメージシーケンスから画像を生成する場合		//		private function imageLoadStart():void{			_nowFrame = 0;			imageLoad();		}		private function imageLoad():void{			trace("imageLoad");			moveProgress(_nowFrame / _imageUrlArray.length);			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaded);			loader.load(new URLRequest(_imageUrlArray[_nowFrame]));		}		private function imageLoaded(event:Event=null):void{			trace("imageLoaded:"+_nowFrame);			moveProgress(_nowFrame / _imageUrlArray.length);						var loaderinfo:LoaderInfo = LoaderInfo(event.target);			loaderinfo.removeEventListener(Event.COMPLETE, imageLoaded);			if(_nowFrame==0){				_w = Bitmap(loaderinfo.content).bitmapData.width;				_h = Bitmap(loaderinfo.content).bitmapData.height;				setRecordBitmapSize();			}			_bmpd = Bitmap(loaderinfo.content).bitmapData.clone();			_bmp.bitmapData = _bmpd;			trace(_ws,_hs,_wp,_hp);			trace(_bmpd.width);			trace(_bmpd.height);			pushBlocksBitmapData(_nowFrame*0.1);			_nowFrame++;						if(_nowFrame >= _imageUrlArray.length){				endGenerate();			}else{				imageLoad();			}			loaderinfo.loader.unload();		}		//		// FLVファイルから画像を生成する場合		//		private var _timer:Timer = new Timer(10);		private var _nowTime:Number = -0.01;		private function movieStart():void{			_nc.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler4Player);			_nc.connect(null);			if(_ns){				_ns.close();			}			_ns=new NetStream(_nc);			_ns.bufferTime = 5;			_ns.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler4Player);			var client:Object=new Object();			client.onMetaData=clientOnMetaData;			client.onPlayStatus=clientOnMetaData;			_ns.client=client;			_ns.play(_movieUrl);			_ns.pause();			_nowPlay = true;			_video.attachNetStream(_ns);			_videoLength = 0;			addEventListener(Event.ENTER_FRAME,movieLoadCheck);			//addEventListener(Event.ENTER_FRAME,enterframe);			//_timer.addEventListener(TimerEvent.TIMER, enterframe);			//_timer.start();		}				private function movieLoadCheck(event:Event=null):void{			if(_ns.bytesLoaded >= _ns.bytesTotal && _videoLength) {								//videoのサイズは既に取得済み				setRecordBitmapSize();												_video.width = _w;				_video.height = _h;				_video.x = _w;								_records.framerate = _framerate;								removeEventListener(Event.ENTER_FRAME,movieLoadCheck);				//addEventListener(Event.ENTER_FRAME,enterframe);				_timer.addEventListener(TimerEvent.TIMER, enterframe);				_timer.start();				//stage.addEventListener(MouseEvent.MOUSE_MOVE,seekVideo);			}		}		private function seekVideo(event:MouseEvent=null):void {			var mx:Number = stage.mouseX;			if(mx<0){				mx = 0;			}else if(mx>_video.width){				mx = _video.width;			}			var t:Number = _videoLength * mx / _video.width;			trace(t);			_ns.seek(_videoLength * mx / _video.width);			trace(_ns.time);		}		private var _nowReplayFrame:int = 0;		private function replayEnterframe(event:Event=null):void{			if(_nowReplayFrame < _records.getFrameCount()){				_records.drawFrame(_decodeBmpd, _nowReplayFrame);			}else {				removeEventListener(Event.ENTER_FRAME,replayEnterframe);			}			_nowReplayFrame++;		}		private var _seeking:Boolean = false;		private var _buffering:Boolean = true;		private function enterframe(event:Event=null):void{			_timer.stop();			var end:Boolean = false;			//removeEventListener(Event.ENTER_FRAME,enterframe);			//trace(_seeking);						moveProgress(_ns.time/_videoLength);						if(!_seeking && _nowPlay){				//trace("test")								var time:Number = _ns.time				trace("enterframe/"+_nowTime+"/"+time+"/"+_videoLength)								if(time != _oldTime){																							_bmpd.lock();					_bmpd.fillRect(new Rectangle(0,0,_bmpd.width,_bmpd.height),0x00000000);					_bmpd.draw(_video);															//_bmpd1.draw(_bmpd0);										//_bmpd0.copyPixels(_bmpd,new Rectangle(300,200,100,100),new Point(0,0));					//_bmpd1.copyPixels(_bmpd,new Rectangle(100,0,100,100),new Point(0,0));										pushBlocksBitmapData(time);										_bmpd.unlock();									_nowFrame++;					if(_ns.time >= _videoLength){						//_timer.removeEventListener(TimerEvent.TIMER,enterframe);						_timer.stop();						end = true;					}				}								var t:Number = _nowTime;				if(t<0){					t = 0;				}else if(t>_videoLength){					t = _videoLength;				}				_ns.seek(t);				_seeking = true;				//_ns.pause();				//_ns.resume();				_nowTime += 0.02;							}			if(end || !_nowPlay){				_timer.stop();								endGenerate();			}else{				_timer.start();			}												_oldTime = time;			//trace((100*d/(c+d))+"%");			//_ns.resume();		}		//		// _bmpdファイルから_blocksにビットマップデータを保存		//		private function pushBlocksBitmapData(time:Number):void{						trace(time)			_records.addRecord(_nowFrame, time);			var record:Record = _records.getLatestRecord();						var ox:Number = 0;			var oy:Number = 0;						var num:int = 0;			for(var i:int=0;i<_ws;i++){				for(var k:int=0;k<_hs;k++){					ox = _wp*i;					oy = _hp*k;										_bmpd0.fillRect(new Rectangle(0,0,_bmpd0.width,_bmpd0.height),0x00000000);					var mtrx:Matrix = new Matrix();					mtrx.translate(-ox,-oy);					_bmpd0.draw(_bmpd,mtrx);					//_bmpd0.copyPixels(_bmpd,new Rectangle(ox,oy,_wp,_hp), new Point(0,0));										num = _blocks.pushBlockBitmapData(i,k,_bmpd0);					record.setBlockNum(i,k,num);									}			}		}						private function netStatusHandler4Player(event:NetStatusEvent):void {			trace(event.info.code)						switch (event.info.code) {				case "NetConnection.Connect.Success" :					break;				case "NetStream.Buffer.Empty" :					_buffering = true;					break;				case "NetStream.Buffer.Full" :					_buffering = false;					_seeking = false;					break;				case "NetStream.Buffer.Flush" :					_buffering = false;					_seeking = false;					break;				case "NetStream.Seek.Complete" :					_seeking = false;					trace(_seeking);					break;				case "NetStream.Seek.Failed" :					_seeking = false;					trace(_seeking);					break;				case "NetStream.Play.StreamNotFound" :					break;				case "NetStream.Play.Stop" :					_nowPlay = false;					removeEventListener(Event.ENTER_FRAME,enterframe)					_ns.pause();					_ns.seek(0);					_seeking = true;					break;			}		}				private function clientOnMetaData(info:Object):void {			trace(info);			_videoLength=info.duration;			_framerate = info.framerate;			/*			_videoWidth=info.width;			_videoHeight=info.height;			*/			_video.width = info.width;			_video.height = info.height;			_w = info.width;			_h = info.height;			if(_video.width > _w){				_video.width = _w;				_video.height = info.height * (_w/info.width);			}			if(_video.height > _h){				_video.height = _h;				_video.width = info.width * (_h/info.height);			}			//_video.x = (_w-_video.width)*0.5;			//_video.y = (_h-_video.height)*0.5;		}		//		// 最終画像ファイルをエクスポート		//		private function saveGraphicFile(bmpd:BitmapData, jpeg:Boolean = true):void {			trace("saveGraphicFile");			try {					var fileName:String;				var byteArray:ByteArray;									if(jpeg){					fileName = _filename+".jpg";					var jpgEncoder:JPGEncoder = new JPGEncoder(100);					byteArray = jpgEncoder.encode(bmpd);				}else{					fileName = _filename+".png";					byteArray = PNGEncoder.encode(bmpd);				}					var file:File = File.desktopDirectory;				file = file.resolvePath(fileName);				var fsw:FileStream = new FileStream();				fsw.open(file,FileMode.WRITE);				fsw.writeBytes(byteArray, 0, byteArray.length);				fsw.close();			} catch (e:Error) {				trace(e.toString());			}		}		//		// JSONファイルをエクスポート		//		private function saveJson(json:String):void {			trace("saveJson");			try {					var fileName:String;				var byteArray:ByteArray;					fileName = _filename+".json";					var file:File = File.desktopDirectory;				file = file.resolvePath(fileName);				var fsw:FileStream = new FileStream();				fsw.open(file,FileMode.WRITE);				fsw.writeUTFBytes(json);				fsw.close();			} catch (e:Error) {				trace(e.toString());			}		}						// Util //		//幅・高さから最小ビットマップ単位を算出		private function setRecordBitmapSize():void{			_wp = getMinSize(_w);			_hp = getMinSize(_h);			_ws = Math.floor(_w/_wp);			_hs = Math.floor(_h/_hp);						_bmpd = new BitmapData(_w,_h,true,0x00000000);			_bmp.bitmapData = _bmpd;			_bmpd0 = new BitmapData(_wp,_hp,true,0x00000000);									_blocks = new Blocks(_ws,_hs,_wp,_hp,_threshold, _threshold2);			_records = new Records(_blocks,_ws,_hs,_wp,_hp);		}		// 複素数分解で最小ブロックサイズを測定		private function getMinSize(num):int {			var r:int = num;						var array:Array = [];			var i:int = 2;			var num2:int = num;			while(i<num){				if(num2%i==0){					num2 = num2/i;					array.push(i);				}else{					i++;				}			}			var wp:int = 1;			for(i=0;i<array.length;i++){				wp *= array[i];				if(wp > Math.floor(num/20)){					r = wp					break;				}			}			return r;		}		private function add0(num:int):String {			if(num<10){				return "0"+num;			}else{				return String(num);			}		}	}	}